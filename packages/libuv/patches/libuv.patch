diff --git a/src/unix/fs.c b/src/unix/fs.c
index 3a74350..3ff8cc0 100644
--- a/src/unix/fs.c
+++ b/src/unix/fs.c
@@ -1221,6 +1221,7 @@ static ssize_t uv__fs_copyfile(uv_fs_t* req) {
 #endif  /* !__linux__ */
   }
 
+#ifndef __ANDROID__
 #ifdef FICLONE
   if (req->flags & UV_FS_COPYFILE_FICLONE ||
       req->flags & UV_FS_COPYFILE_FICLONE_FORCE) {
@@ -1240,6 +1241,7 @@ static ssize_t uv__fs_copyfile(uv_fs_t* req) {
     err = UV_ENOSYS;
     goto out;
   }
+#endif
 #endif
 
   bytes_to_send = src_statsbuf.st_size;
@@ -1381,7 +1383,8 @@ static int uv__fs_statx(int fd,
                         int is_lstat,
                         uv_stat_t* buf) {
   STATIC_ASSERT(UV_ENOSYS != -1);
-#ifdef __linux__
+#if defined(__linux__) && !defined(__ANDROID__)
+  /* The statx system call is prevented by seccomp on Android. */
   static _Atomic int no_statx;
   struct uv__statx statxbuf;
   int dirfd;
diff --git a/src/unix/linux.c b/src/unix/linux.c
index 4164e90..5917194 100644
--- a/src/unix/linux.c
+++ b/src/unix/linux.c
@@ -430,7 +430,11 @@ ssize_t uv__getrandom(void* buf, size_t buflen, unsigned flags) {
 
 
 int uv__io_uring_setup(int entries, struct uv__io_uring_params* params) {
+#ifdef __ANDROID__
+  return errno = ENOSYS, -1;
+#else
   return syscall(__NR_io_uring_setup, entries, params);
+#endif
 }
 
 
@@ -438,6 +442,9 @@ int uv__io_uring_enter(int fd,
                        unsigned to_submit,
                        unsigned min_complete,
                        unsigned flags) {
+#ifdef __ANDROID__
+  return errno = ENOSYS, -1;
+#else
   /* io_uring_enter used to take a sigset_t but it's unused
    * in newer kernels unless IORING_ENTER_EXT_ARG is set,
    * in which case it takes a struct io_uring_getevents_arg.
@@ -449,11 +456,16 @@ int uv__io_uring_enter(int fd,
                  flags,
                  NULL,
                  0L);
+#endif
 }
 
 
 int uv__io_uring_register(int fd, unsigned opcode, void* arg, unsigned nargs) {
+#ifdef __ANDROID__
+  return errno = ENOSYS, -1;
+#else
   return syscall(__NR_io_uring_register, fd, opcode, arg, nargs);
+#endif
 }
 
 
